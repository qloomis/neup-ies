# -*- coding: utf-8 -*-
"""
Pyomo real-time dispatch model


Model authors:
* Mike Wagner - UW-Madison
* Bill Hamilton - NREL 
* John Cox - Colorado School of Mines
* Alex Zolan - NREL

Pyomo code by Alex Zolan
Modified by Gabriel Soto
"""
#import pyomo
import pyomo.environ as pe

class GeneralDispatch(object):
    def __init__(self, params, include={"pv":False,"battery":False,"persistence":False}):
        self.model = pe.ConcreteModel()
        self.include = include
        self.generateParams(params)
        self.generateVariables()
        self.addObjective()
        self.generateConstraints()

    def generateParams(self,params):
        ### Sets and Indices ###
        self.model.T = pe.Set(initialize = range(1,params["T"]+1))  #T: time periods
        self.model.num_periods = pe.Param(initialize=params["T"])
        #------- Time indexed parameters ---------
        self.model.Delta = pe.Param(self.model.T, mutable=False, initialize=params["Delta"])          #duration of period t
        self.model.Delta_e = pe.Param(self.model.T, mutable=False, initialize=params["Delta_e"])       #cumulative time elapsed at end of period t
        ### Time series CSP Parameters ###
        self.model.delta_rs = pe.Param(self.model.T, mutable=True, initialize=params["delta_rs"]) # \delta^{rs}_{t}: Estimated fraction of period $t$ required for receiver start-up [-]
        self.model.D = pe.Param(self.model.T, mutable=True, initialize=params["D"]) #D_{t}: Time-weighted discount factor in period $t$ [-]
        self.model.etaamb = pe.Param(self.model.T, mutable=True, initialize=params["etaamb"])  #\eta^{amb}_{t}: Cycle efficiency ambient temperature adjustment factor in period $t$ [-]
        self.model.etac = pe.Param(self.model.T, mutable=True, initialize=params["etac"])   #\eta^{c}_{t}:   Normalized condenser parasitic loss in period $t$ [-] 
        self.model.P = pe.Param(self.model.T, mutable=True, initialize=params["P"])       #P_{t}: Electricity sales price in period $t$ [\$/kWh\sse]
        self.model.Qin = pe.Param(self.model.T, mutable=True, initialize=params["Qin"])    #Q^{in}_{t}: Available thermal power generated by the CSP heliostat field in period $t$ [kW\sst]
        self.model.Qc = pe.Param(self.model.T, mutable=True, initialize=params["Qc"])     #Q^{c}_{t}: Allowable power per period for cycle start-up in period $t$ [kW\sst]
        self.model.Wdotnet = pe.Param(self.model.T, mutable=True, initialize=params["Wdotnet"])  #\dot{W}^{net}_{t}: Net grid transmission upper limit in period $t$ [kW\sse]
        self.model.W_u_plus = pe.Param(self.model.T, mutable=True, initialize=params["W_u_plus"])  #W^{u+}_{t}: Maximum power production when starting generation in period $t$  [kW\sse]
        self.model.W_u_minus = pe.Param(self.model.T, mutable=True, initialize=params["W_u_minus"])  #W^{u-}_{t}: Maximum power production in period $t$ when stopping generation in period $t+1$  [kW\sse]

        ### Cost Parameters ###
        self.model.alpha = pe.Param(mutable=True, initialize=params["alpha"])        #alpha: Conversion factor between unitless and monetary values [\$]
        self.model.Crec = pe.Param(mutable=True, initialize=params["Crec"])         #Crec: Operating cost of heliostat field and receiver [\$/kWh\sst]
        self.model.Crsu = pe.Param(mutable=True, initialize=params["Crsu"])         #Crsu: Penalty for receiver cold start-up [\$/start]
        self.model.Crhsp = pe.Param(mutable=True, initialize=params["Crhsp"])        #Crhsp: Penalty for receiver hot start-up [\$/start]
        self.model.Cpc = pe.Param(mutable=True, initialize=params["Cpc"])          #Cpc: Operating cost of power cycle [\$/kWh\sse]
        self.model.Ccsu = pe.Param(mutable=True, initialize=params["Ccsu"])        #Ccsu: Penalty for power cycle cold start-up [\$/start]
        self.model.Cchsp = pe.Param(mutable=True, initialize=params["Cchsp"])       #Cchsp: Penalty for power cycle hot start-up [\$/start]
        self.model.C_delta_w = pe.Param(mutable=True, initialize=params["C_delta_w"])    #C_delta_w: Penalty for change in power cycle  production [\$/$\Delta\text{kW}$\sse]
        self.model.C_v_w = pe.Param(mutable=True, initialize=params["C_v_w"])        #C_v_w: Penalty for change in power cycle  production \tcb{beyond designed limits} [\$/$\Delta\text{kW}$\sse]
        self.model.Ccsb = pe.Param(mutable=True, initialize=params["Ccsb"])         #Ccsb: Operating cost of power cycle standby operation [\$/kWh\sst]
        
        
        ### CSP Field and Receiver Parameters ###
        self.model.deltal = pe.Param(mutable=True, initialize=params["deltal"])    #Minimum time to start the receiver [hr]
        self.model.Ehs = pe.Param(mutable=True, initialize=params["Ehs"])       #Heliostat field startup or shut down parasitic loss [kWh\sse]
        self.model.Er = pe.Param(mutable=True, initialize=params["Er"])        #Required energy expended to start receiver [kWh\sst]
        self.model.Eu = pe.Param(mutable=True, initialize=params["Eu"])        #Thermal energy storage capacity [kWh\sst]
        self.model.Lr = pe.Param(mutable=True, initialize=params["Lr"])        #Receiver pumping power per unit power produced [kW\sse/kW\sst]
        self.model.Qrl = pe.Param(mutable=True, initialize=params["Qrl"])       #Minimum operational thermal power delivered by receiver [kWh\sst]
        self.model.Qrsb = pe.Param(mutable=True, initialize=params["Qrsb"])      #Required thermal power for receiver standby [kWh\sst]
        self.model.Qrsd = pe.Param(mutable=True, initialize=params["Qrsd"])      #Required thermal power for receiver shut down [kWh\sst] 
        self.model.Qru = pe.Param(mutable=True, initialize=params["Qru"])       #Allowable power per period for receiver start-up [kWh\sst]
        self.model.Wh = pe.Param(mutable=True, initialize=params["Wh"])        #Heliostat field tracking parasitic loss [kW\sse]
        self.model.Wht = pe.Param(mutable=True, initialize=params["Wht"])       #Tower piping heat trace parasitic loss [kW\sse]
        
        ### Power Cycle Parameters ###
        self.model.Ec = pe.Param(mutable=True, initialize=params["Ec"])           #Required energy expended to start cycle [kWh\sst]
        self.model.eta_des = pe.Param(mutable=True, initialize=params["eta_des"])      #Cycle nominal efficiency [-] 
        self.model.etap = pe.Param(mutable=True, initialize=params["etap"])         #Slope of linear approximation of power cycle performance curve [kW\sse/kW\sst]
        self.model.Lc = pe.Param(mutable=True, initialize=params["Lc"])           #Cycle heat transfer fluid pumping power per unit energy expended [kW\sse/kW\sst]
        self.model.Qb = pe.Param(mutable=True, initialize=params["Qb"])           #Cycle standby thermal power consumption per period [kW\sst]
        self.model.Ql = pe.Param(mutable=True, initialize=params["Ql"])           #Minimum operational thermal power input to cycle [kW\sst]
        self.model.Qu = pe.Param(mutable=True, initialize=params["Qu"])           #Cycle thermal power capacity [kW\sst]
        self.model.Wb = pe.Param(mutable=True, initialize=params["Wb"])           #Power cycle standby operation parasitic load [kW\sse]
        self.model.Wdotl = pe.Param(mutable=True, initialize=params["Wdotl"])        #Minimum cycle electric power output [kW\sse]
        self.model.Wdotu = pe.Param(mutable=True, initialize=params["Wdotu"])        #Cycle electric power rated capacity [kW\sse]
        self.model.W_delta_plus = pe.Param(mutable=True, initialize=params["W_delta_plus"]) #Power cycle ramp-up designed limit [kW\sse/h]
        self.model.W_delta_minus = pe.Param(mutable=True, initialize=params["W_delta_minus"])#Power cycle ramp-down designed limit [kW\sse/h]
        self.model.W_v_plus = pe.Param(mutable=True, initialize=params["W_v_plus"])     #Power cycle ramp-up violation limit [kW\sse/h]
        self.model.W_v_minus = pe.Param(mutable=True, initialize=params["W_v_minus"])    #Power cycle ramp-down violation limit [kW\sse/h]
        self.model.Yu = pe.Param(mutable=True, initialize=params["Yu"])           #Minimum required power cycle uptime [h]
        self.model.Yd = pe.Param(mutable=True, initialize=params["Yd"])           #Minimum required power cycle downtime [h]
        
        ### Initial Condition Parameters ###
        self.model.s0 = pe.Param(mutable=True, initialize=params["s0"])  #Initial TES reserve quantity  [kWh\sst]
        self.model.ucsu0 = pe.Param(mutable=True, initialize=params["ucsu0"]) #Initial cycle start-up energy inventory  [kWh\sst]
        self.model.ursu0 = pe.Param(mutable=True, initialize=params["ursu0"]) #Initial receiver start-up energy inventory [kWh\sst]
        self.model.wdot0 = pe.Param(mutable=True, initialize=params["wdot0"]) #Initial power cycle electricity generation [kW\sse]
        self.model.yr0 = pe.Param(mutable=True, initialize=params["yr0"])  #1 if receiver is generating ``usable'' thermal power initially, 0 otherwise  [az] this is new.
        self.model.yrsb0 = pe.Param(mutable=True, initialize=params["yrsb0"])  #1 if receiver is in standby mode initially, 0 otherwise [az] this is new.
        self.model.yrsu0 = pe.Param(mutable=True, initialize=params["yrsu0"])  #1 if receiver is in starting up initially, 0 otherwise    [az] this is new.
        self.model.y0 = pe.Param(mutable=True, initialize=params["y0"])  #1 if cycle is generating electric power initially, 0 otherwise
        self.model.ycsb0 = pe.Param(mutable=True, initialize=params["ycsb0"])  #1 if cycle is in standby mode initially, 0 otherwise
        self.model.ycsu0 = pe.Param(mutable=True, initialize=params["ycsu0"])  #1 if cycle is in starting up initially, 0 otherwise    [az] this is new.
        self.model.Yu0 = pe.Param(mutable=True, initialize=params["Yu0"])  # duration that cycle has been generating electric power [h]
        self.model.Yd0 = pe.Param(mutable=True, initialize=params["Yd0"])  # duration that cycle has not been generating power (i.e., shut down or in standby mode) [h]
        self.model.Yu.pprint()
        self.model.Yd.pprint()
        self.model.Yu0.pprint()
        self.model.Yd0.pprint()
        
        #------- Persistence Parameters ---------
        self.model.wdot_s_prev  = pe.Param(self.model.T, mutable=True, initialize=params["wdot_s_prev"])
        self.model.wdot_s_pen  = pe.Param(self.model.T, mutable=True, initialize=params["wdot_s_pen"])
        
        #------- Miscellaneous Parameters taken from SAM ---------
        self.model.day_of_year = pe.Param(mutable=True, initialize=params["day_of_year"])
        self.model.disp_time_weighting = pe.Param(mutable=True, initialize=params["disp_time_weighting"])
        self.model.csu_cost = pe.Param(mutable=True, initialize=params["csu_cost"])
        self.model.eta_cycle = pe.Param(mutable=True, initialize=params["eta_cycle"])
        self.model.gamma = pe.Param(mutable=True, initialize=params["gamma"])
        self.model.gammac = pe.Param(mutable=True, initialize=params["gammac"])
        self.model.M = pe.Param(mutable=True, initialize=params["M"]) 
        self.model.qrecmaxobs = pe.Param(mutable=True, initialize=params["qrecmaxobs"])
        self.model.W_dot_cycle = pe.Param(mutable=True, initialize=params["W_dot_cycle"])
        self.model.Z_1 = pe.Param(mutable=True, initialize=params["Z_1"])
        self.model.Z_2 = pe.Param(mutable=True, initialize=params["Z_2"])
        self.model.max_up = pe.Param(mutable=True, initialize=params["max_up"])
        self.model.max_down = pe.Param(mutable=True, initialize=params["max_down"])
        self.model.max_up_v = pe.Param(mutable=True, initialize=params["max_up_v"])
        self.model.max_down_v = pe.Param(mutable=True, initialize=params["max_down_v"])
        self.model.pen_delta_w = pe.Param(mutable=True, initialize=params["pen_delta_w"])
        self.model.q0 = pe.Param(mutable=True, initialize=params["q0"])
        self.model.rsu_cost = pe.Param(mutable=True, initialize=params["rsu_cost"])
        self.model.tdown0 = pe.Param(mutable=True, initialize=params["tdown0"])
        self.model.tstby0 = pe.Param(mutable=True, initialize=params["tstby0"])
        self.model.tup0 = pe.Param(mutable=True, initialize=params["tup0"])
        self.model.Wdot0 = pe.Param(mutable=True, initialize=params["Wdot0"])
        self.model.wnet_lim_min = pe.Param(self.model.T, mutable=True, initialize=params["wnet_lim_min"])
        self.model.cap_frac = pe.Param(self.model.T, mutable=True, initialize=params["cap_frac"])
        self.model.eff_frac = pe.Param(self.model.T, mutable=True, initialize=params["eff_frac"])
        self.model.dt = pe.Param(self.model.T, mutable=True, initialize=params["dt"])
        self.model.dte = pe.Param(self.model.T, mutable=True, initialize=params["dte"])
        self.model.twt = pe.Param(self.model.T, mutable=True, initialize=params["twt"])
        

    def generateVariables(self):
        ### Decision Variables ###
        pass
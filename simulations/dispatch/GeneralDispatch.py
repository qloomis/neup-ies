# -*- coding: utf-8 -*-
"""
Pyomo real-time dispatch model


Model authors:
* Mike Wagner - UW-Madison
* Bill Hamilton - NREL 
* John Cox - Colorado School of Mines
* Alex Zolan - NREL

Pyomo code by Alex Zolan
Modified by Gabriel Soto
"""
#import pyomo
import pyomo.environ as pe

class GeneralDispatch(object):
    def __init__(self, params, include={"pv":False,"battery":False,"persistence":False}):
        self.model = pe.ConcreteModel()
        self.include = include
        self.generateParams(params)
        self.generateVariables()
        self.addObjective()
        self.generateConstraints()

    def generateParams(self,params):
        ### Sets and Indices ###
        self.model.T = pe.Set(initialize = range(1,params["T"]+1))  #T: time periods
        self.model.num_periods = pe.Param(initialize=params["T"]) #N_T: number of time periods
        
        #------- Time indexed parameters ---------
        self.model.Delta = pe.Param(self.model.T, mutable=False, initialize=params["Delta"])          #\Delta_{t}: duration of period t
        self.model.Delta_e = pe.Param(self.model.T, mutable=False, initialize=params["Delta_e"])       #\Delta_{e,t}: cumulative time elapsed at end of period t
        
        ### Time series CSP Parameters ###
        self.model.delta_rs = pe.Param(self.model.T, mutable=True, initialize=params["delta_rs"]) #\delta^{rs}_{t}: Estimated fraction of period $t$ required for receiver start-up [-]
        self.model.D = pe.Param(self.model.T, mutable=True, initialize=params["D"]) #D_{t}: Time-weighted discount factor in period $t$ [-]
        self.model.etaamb = pe.Param(self.model.T, mutable=True, initialize=params["etaamb"])  #\eta^{amb}_{t}: Cycle efficiency ambient temperature adjustment factor in period $t$ [-]
        self.model.etac = pe.Param(self.model.T, mutable=True, initialize=params["etac"])   #\eta^{c}_{t}: Normalized condenser parasitic loss in period $t$ [-] 
        self.model.P = pe.Param(self.model.T, mutable=True, initialize=params["P"])       #P_{t}: Electricity sales price in period $t$ [\$/kWh]
        self.model.Qin = pe.Param(self.model.T, mutable=True, initialize=params["Qin"])    #Q^{in}_{t}: Available thermal power generated by the CSP heliostat field in period $t$ [kWt]
        self.model.Qc = pe.Param(self.model.T, mutable=True, initialize=params["Qc"])     #Q^{c}_{t}: Allowable power per period for cycle start-up in period $t$ [kWt]
        self.model.Wdotnet = pe.Param(self.model.T, mutable=True, initialize=params["Wdotnet"])  #\dot{W}^{net}_{t}: Net grid transmission upper limit in period $t$ [kWe]
        self.model.W_u_plus = pe.Param(self.model.T, mutable=True, initialize=params["W_u_plus"])  #W^{u+}_{t}: Maximum power production when starting generation in period $t$  [kWe]
        self.model.W_u_minus = pe.Param(self.model.T, mutable=True, initialize=params["W_u_minus"])  #W^{u-}_{t}: Maximum power production in period $t$ when stopping generation in period $t+1$  [kWe]

        ### Cost Parameters ###
        self.model.alpha = pe.Param(mutable=True, initialize=params["alpha"])        #\alpha: Conversion factor between unitless and monetary values [\$]
        self.model.Crec = pe.Param(mutable=True, initialize=params["Crec"])         #C^{rec}: Operating cost of heliostat field and receiver [\$/kWt$\cdot$h]
        self.model.Crsu = pe.Param(mutable=True, initialize=params["Crsu"])         #C^{rsu}: Penalty for receiver cold start-up [\$/start]
        self.model.Crhsp = pe.Param(mutable=True, initialize=params["Crhsp"])        #C^{rhsp}: Penalty for receiver hot start-up [\$/start]
        self.model.Cpc = pe.Param(mutable=True, initialize=params["Cpc"])          #C^{pc}: Operating cost of power cycle [\$/kWe$\cdot$h]
        self.model.Ccsu = pe.Param(mutable=True, initialize=params["Ccsu"])        #C^{csu}: Penalty for power cycle cold start-up [\$/start]
        self.model.Cchsp = pe.Param(mutable=True, initialize=params["Cchsp"])       #C^{chsp}: Penalty for power cycle hot start-up [\$/start]
        self.model.C_delta_w = pe.Param(mutable=True, initialize=params["C_delta_w"])    #C^{\delta_w}: Penalty for change in power cycle  production [\$/$\Delta\text{kWe}$]
        self.model.C_v_w = pe.Param(mutable=True, initialize=params["C_v_w"])        #C^{v_w}: Penalty for change in power cycle  production tcb{beyond designed limits} [\$/$\Delta\text{kWe}$]
        self.model.Ccsb = pe.Param(mutable=True, initialize=params["Ccsb"])         #C^{csb}: Operating cost of power cycle standby operation [\$/kWt$\cdot$h]
        
        ### CSP Field and Receiver Parameters ###
        self.model.deltal = pe.Param(mutable=True, initialize=params["deltal"])    #\delta^l: Minimum time to start the receiver [hr]
        self.model.Ehs = pe.Param(mutable=True, initialize=params["Ehs"])       #E^{hs}: Heliostat field startup or shut down parasitic loss [kWe$\cdot$h]
        self.model.Er = pe.Param(mutable=True, initialize=params["Er"])        #E^r: Required energy expended to start receiver [kWt$\cdot$h]
        self.model.Eu = pe.Param(mutable=True, initialize=params["Eu"])        #E^u: Thermal energy storage capacity [kWt$\cdot$h]
        self.model.Lr = pe.Param(mutable=True, initialize=params["Lr"])        #L^r: Receiver pumping power per unit power produced [kWe/kWt]
        self.model.Qrl = pe.Param(mutable=True, initialize=params["Qrl"])       #Q^{rl}: Minimum operational thermal power delivered by receiver [kWt$\cdot$h]
        self.model.Qrsb = pe.Param(mutable=True, initialize=params["Qrsb"])      #Q^{rsb}: Required thermal power for receiver standby [kWt$\cdot$h]
        self.model.Qrsd = pe.Param(mutable=True, initialize=params["Qrsd"])      #Q^{rsd}: Required thermal power for receiver shut down [kWt$\cdot$h] 
        self.model.Qru = pe.Param(mutable=True, initialize=params["Qru"])       #Q^{ru}: Allowable power per period for receiver start-up [kWt$\cdot$h]
        self.model.Wh = pe.Param(mutable=True, initialize=params["Wh"])        #W^h: Heliostat field tracking parasitic loss [kWe]
        self.model.Wht = pe.Param(mutable=True, initialize=params["Wht"])       #W^{ht}: Tower piping heat trace parasitic loss [kWe]
        
        ### Power Cycle Parameters ###
        self.model.Ec = pe.Param(mutable=True, initialize=params["Ec"])           #E^c: Required energy expended to start cycle [kWt$\cdot$h]
        self.model.eta_des = pe.Param(mutable=True, initialize=params["eta_des"])      #\eta^{des}: Cycle nominal efficiency [-] 
        self.model.etap = pe.Param(mutable=True, initialize=params["etap"])         #\eta^p: Slope of linear approximation of power cycle performance curve [kWe/kWt]
        self.model.Lc = pe.Param(mutable=True, initialize=params["Lc"])           #L^c: Cycle heat transfer fluid pumping power per unit energy expended [kWe/kWt]
        self.model.Qb = pe.Param(mutable=True, initialize=params["Qb"])           #Q^b: Cycle standby thermal power consumption per period [kWt]
        self.model.Ql = pe.Param(mutable=True, initialize=params["Ql"])           #Q^l: Minimum operational thermal power input to cycle [kWt]
        self.model.Qu = pe.Param(mutable=True, initialize=params["Qu"])           #Q^u: Cycle thermal power capacity [kWt]
        self.model.Wb = pe.Param(mutable=True, initialize=params["Wb"])           #W^b: Power cycle standby operation parasitic load [kWe]
        self.model.Wdotl = pe.Param(mutable=True, initialize=params["Wdotl"])        #\dot{W}^l: Minimum cycle electric power output [kWe]
        self.model.Wdotu = pe.Param(mutable=True, initialize=params["Wdotu"])        #\dot{W}^u: Cycle electric power rated capacity [kWe]
        self.model.W_delta_plus = pe.Param(mutable=True, initialize=params["W_delta_plus"]) #W^{\Delta+}: Power cycle ramp-up designed limit [kWe/h]
        self.model.W_delta_minus = pe.Param(mutable=True, initialize=params["W_delta_minus"]) #W^{\Delta-}: Power cycle ramp-down designed limit [kWe/h]
        self.model.W_v_plus = pe.Param(mutable=True, initialize=params["W_v_plus"])     #W^{v+}: Power cycle ramp-up violation limit [kWe/h]
        self.model.W_v_minus = pe.Param(mutable=True, initialize=params["W_v_minus"])    #W^{v-}: Power cycle ramp-down violation limit [kWe/h]
        self.model.Yu = pe.Param(mutable=True, initialize=params["Yu"])           #Y^u: Minimum required power cycle uptime [h]
        self.model.Yd = pe.Param(mutable=True, initialize=params["Yd"])           #Y^d: Minimum required power cycle downtime [h]
        
        ### Initial Condition Parameters ###
        self.model.s0 = pe.Param(mutable=True, initialize=params["s0"])  #s_0: Initial TES reserve quantity  [kWt$\cdot$h]
        self.model.ucsu0 = pe.Param(mutable=True, initialize=params["ucsu0"]) #u^{csu}_0: Initial cycle start-up energy inventory  [kWt$\cdot$h]
        self.model.ursu0 = pe.Param(mutable=True, initialize=params["ursu0"]) #u^{rsu}_0: Initial receiver start-up energy inventory [kWt$\cdot$h]
        self.model.wdot0 = pe.Param(mutable=True, initialize=params["wdot0"]) #\dot{w}_0: Initial power cycle electricity generation [kW]e
        self.model.yr0 = pe.Param(mutable=True, initialize=params["yr0"])  #y^r_0: 1 if receiver is generating ``usable'' thermal power initially, 0 otherwise  [az] this is new.
        self.model.yrsb0 = pe.Param(mutable=True, initialize=params["yrsb0"])  #y^{rsb}_0: 1 if receiver is in standby mode initially, 0 otherwise [az] this is new.
        self.model.yrsu0 = pe.Param(mutable=True, initialize=params["yrsu0"])  #y^{rsu}_0: 1 if receiver is in starting up initially, 0 otherwise    [az] this is new.
        self.model.y0 = pe.Param(mutable=True, initialize=params["y0"])  #y_0: 1 if cycle is generating electric power initially, 0 otherwise
        self.model.ycsb0 = pe.Param(mutable=True, initialize=params["ycsb0"])  #y^{csb}_0: 1 if cycle is in standby mode initially, 0 otherwise
        self.model.ycsu0 = pe.Param(mutable=True, initialize=params["ycsu0"])  #y^{csu}_0: 1 if cycle is in starting up initially, 0 otherwise    [az] this is new.
        self.model.Yu0 = pe.Param(mutable=True, initialize=params["Yu0"])  #Y^u_0: duration that cycle has been generating electric power [h]
        self.model.Yd0 = pe.Param(mutable=True, initialize=params["Yd0"])  #Y^d_0: duration that cycle has not been generating power (i.e., shut down or in standby mode) [h]
        
        #------- Persistence Parameters ---------
        self.model.wdot_s_prev  = pe.Param(self.model.T, mutable=True, initialize=params["wdot_s_prev"]) #\dot{w}^{s,prev}: previous $\dot{w}$ 
        self.model.wdot_s_pen  = pe.Param(self.model.T, mutable=True, initialize=params["wdot_s_pen"]) #\dot{w}_{s,pen}: previous $\dot{w}$ 

        

    def generateVariables(self):
        ### Decision Variables ###
        pass